library(Compositional)
library(Compositional)
library(Compositional)
library(Compositional)
y <- rdiri(500, runif(3, 1, 3))
library(Compositional)
y <- rdiri(500, runif(3, 1, 3))
x <- rdiri(500, runif(3, 1, 3))
mod <- scrq(y, x, nfolds = 5)
y <- rdiri(500, runif(3, 1, 3))
x <- rdiri(500, runif(3, 1, 3))
mod <- scrq(y, x)
mod
library(Compositional)
?alfa.reg2
source("~/GitHub/Compositional/R/alfa.reg2.R")
?alfa.reg2
library(MASS)
x <- as.vector(fgl[1:40, 1])
y <- as.matrix(fgl[1:40, 2:9])
y <- y / rowSums(y)
mod <- alfa.reg(y, x, 0.2)
library(MASS)
x <- as.vector(fgl[1:40, 1])
y <- as.matrix(fgl[1:40, 2:9])
y <- y / rowSums(y)
mod <- alfa.reg2(y, x, c(0.1,0.2))
library(MASS)
x <- as.vector(fgl[1:40, 1])
y <- as.matrix(fgl[1:40, 2:9])
y <- y / rowSums(y)
mod2 <- alfa.reg22(y, x, c(0.1,0.2))
source("~/GitHub/Compositional/R/alfa.reg2.R")
library(MASS)
x <- as.vector(fgl[1:40, 1])
y <- as.matrix(fgl[1:40, 2:9])
y <- y / rowSums(y)
mod2 <- alfa.reg22(y, x, c(0.1,0.2))
source("~/GitHub/Compositional/R/alfa.reg2.R")
library(MASS)
x <- as.vector(fgl[1:40, 1])
y <- as.matrix(fgl[1:40, 2:9])
y <- y / rowSums(y)
mod2 <- alfa.reg22(y, x, c(0.1,0.2))
a=c(0.1,0.2)
xnew=NULL
reg <- function(para, ya, ax, a, ha, d, D) {
be <- matrix(para, ncol = d)
zz <- cbind( 1, exp(ax %*% be) )
ta <- rowSums(zz)
za <- zz / ta
ma <- ( D / a * za - 1/a ) %*% ha
as.vector(ya - ma)
}
runtime <- proc.time()
res <- list()
D <- dim(y)[2]
d <- D - 1  ## dimensionality of the simplex
p <- dim(x)[2] - 1
x <- model.matrix(ya ~., data.frame(x) )
ya
i
i=1
if ( a == 0 ) {
mod <- Compositional::comp.reg(y, x[, -1], yb = NULL)
be <- mod$be
if ( !is.null(seb) )  seb <- mod$seb
}
source("~/GitHub/Compositional/R/alfa.reg2.R")
library(MASS)
x <- as.vector(fgl[1:40, 1])
y <- as.matrix(fgl[1:40, 2:9])
y <- y / rowSums(y)
mod2 <- alfa.reg22(y, x, c(0.1,0.2))
i
if ( a[i] <= 1e-4 ) {
mod <- Compositional::comp.reg(y, x[, -1], yb = NULL)
be <- mod$be
if ( !is.null(seb) )  seb <- mod$seb
}
ya <- Compositional::alfa(y, a[i])$aff
ax <- a[i] * x
ini <- as.vector( solve(crossprod(x), crossprod(x, ya) ) )
suppressWarnings({
mod <- minpack.lm::nls.lm( par = ini, fn = reg, ya = ya, ax = ax, a = a[i], ha = ha, d = d, D = D,
control = minpack.lm::nls.lm.control(maxiter = 10000) )
})
reg <- function(para, ya, ax, a, ha, d, D) {
be <- matrix(para, ncol = d)
zz <- cbind( 1, exp(ax %*% be) )
ta <- rowSums(zz)
za <- zz / ta
ma <- ( D / a * za - 1/a ) %*% ha
as.vector(ya - ma)
}
runtime <- proc.time()
res <- list()
D <- dim(y)[2]
d <- D - 1  ## dimensionality of the simplex
p <- dim(x)[2] - 1
x <- model.matrix(ya ~., data.frame(x) )
ha <- t( Compositional::helm(D) )
if ( is.null( colnames(x) ) ) {
namx <- c("constant", paste("X", 1:p, sep = "") )
} else {
namx  <- c("constant", colnames(x)[-1] )
}
ha
if ( min(y) == 0 )  a <- a[a > 0 ]
a
ya <- Compositional::alfa(y, a[i])$aff
ax <- a[i] * x
ini <- as.vector( solve(crossprod(x), crossprod(x, ya) ) )
suppressWarnings({
mod <- minpack.lm::nls.lm( par = ini, fn = reg, ya = ya, ax = ax, a = a[i], ha = ha, d = d, D = D,
control = minpack.lm::nls.lm.control(maxiter = 10000) )
})
be <- matrix(mod$par, ncol = d)
source("~/GitHub/Compositional/R/alfa.reg2.R")
library(MASS)
x <- as.vector(fgl[1:40, 1])
y <- as.matrix(fgl[1:40, 2:9])
y <- y / rowSums(y)
mod2 <- alfa.reg22(y, x, c(0.1,0.2))
mod
mod2
mod <- alfa.reg2(y, x, c(0.1,0.2))
mod
mod2
mod
mod[[1]]
mod[[1]]$be
mod2[[1]]$be
