aeqdist.etest <- function(x, sizes, a = 1, R = 999) {

  tab <- Rfast::Table(sizes)

  if ( length(tab) == 2 ) {
    nx <- tab[1]  ;  ny <- tab[2]
    n <- nx + ny

    if ( length(a) == 1 ) {
      stat <- Rfast::Dist(x[1:nx, ], result = "sum") / nx +
              Rfast::Dist(x[-c(1:nx), ], result = "sum") / ny
      pstat <- numeric(R)
      for ( j in 1:R ) {
        id <- Rfast2::Sample.int(n, nx)
        pstat[j] <- Rfast::Dist(x[id, ], result = "sum") / nx +
                    Rfast::Dist(x[-id, ], result = "sum") / ny
      }
      res <- ( sum( pstat >= stat ) + 1 ) / (R + 1)
    } else {
      if ( min(x) == 0 )  a <- a[ a > 0 ]
      len <- length(a)
      res <- numeric(len)

      for ( i in 1:len ) {
        y <- Compositional::alfa(x, a[i])$aff
        stat <- Rfast::Dist(y[1:nx, ], result = "sum") / nx +
                Rfast::Dist(y[-c(1:nx), ], result = "sum") / ny
        pstat <- numeric(R)
        for ( j in 1:R ) {
          id <- Rfast2::Sample.int(n, nx)
          pstat[j] <- Rfast::Dist(y[id, ], result = "sum") / nx +
                      Rfast::Dist(y[-id, ], result = "sum") / ny
        }
        res[i] <- ( sum( pstat >= stat ) + 1 ) / (R + 1)
      }
      names(res) <- a
    }

  } else {

    if ( length(a) == 1 ) {
      x <- Compositional::alfa(x, a)$aff
      res <- energy::eqdist.etest(x, sizes, R = R)$p.value
    } else {
      if ( min(x) == 0 )  a <- a[ a > 0 ]
      len <- length(a)
      res <- numeric(len)
      for (i in 1:len) {
        y <- Compositional::alfa(x, a[i])$aff
        res[i] <- energy::eqdist.etest(y, sizes, R = R)$p.value
      }
      names(res) <- a
    }
  }

  res
}
